# Comandos para configurar o Git após instalação (Ou ele pede no primeiro pull pra você logar com email e senha)
git config --global user.name "Your Name"
git config --global user.email "yourname@example.com"

# Setar a branch para main caso ela não esteja no padrão novo
git config --global init.defaultBranch main

# Colorful Output 
git config --global color.ui auto

# Source desse código acima
https://www.theodinproject.com/lessons/foundations-setting-up-git

######################################################################
Pra pegar a chave SSH e registrar no Windows e no Ubuntu
Chaves RSA ou ED25591 tem a mesma finalidade.

A chave publica .pub é a que deve ser cadastrada no settings no GitHub.
A chave privada é a que deve ser usada na máquina no usuário.

Windows:
## No prompt esta na pasta usuario/.ssh antes de digitar os comandos abaixo.
Comando pra gerar a Chave SSH no Windows
ssh-keygen -t rsa -b 4096 -C "seuemail@seuemail.com"
# Para adicionar a chave ao agente GIT
ssh-add C:\Users\SeuUsuário\.ssh\id_rsa ou id_rsa_algo (O nome você pode escolher na geração da Chave)
NOTA: Ao adicionar a chave ao agente GIT deve ser sempre a chave Privada, sem o ".pub" no final, dentro da pasta .ssh .
Estando na pasta .ssh no Windows para digitar "type <nomedachave>.pub" , copiar e colocar nas settings do Github.

Basta acessar a basta com o terminal e dentro dela digitar "type id_rsa.pub" ou o nome que vc escolheu no File name.
Copiar este código e adicionar no github pra validar.

No Ubuntu após gerar a chave SSH basta digitar:
"cat ~/.ssh/id_ed25519.pub"
Copiar a chave na sua conta gibhub e registrar.

As chaves são registradas dentro de Settings na sua conta do GitHub
Para Multiplas Chaves na mesma Máquina. Video interessante
https://www.youtube.com/watch?v=n3sldctfF68

##########################
########  ATENÇÃO ########
##########################
Tanto no Windows como no Linus após instalar o GIT temos a pasta (.ssh)
Dentro dessa pasta podemos configurar hosts para diferentes chaves / conta do GitHub usadas.
Muito útil pra quando você usa o Git pessoal e o do Trabalho na mesma máquina por exemplo.
## Exemplo de configuração ##
Host github.com
    HostName github.com
    User git
    IdentityFile C:\Users\SeuUsuario\.ssh\id_rsa_custom

Desta forma acima podemos clonar usando o comando default do Git e ali dizemos ao Git onde esta a nossa chave SSH.
Eu preferi deixar o comando default para minha conta pessoal do GIT.
Já para outras contas podemos usar da seguinte forma, no mesmo arquivo config, abaixo do Host acima criamos um segundo:
Host github.com-work
    HostName github.com
    User git
    IdentityFile C:\Users\SeuUsuario\.ssh\id_rsa_work  <= Aqui direcionamos o host para a chave criada com email do trabalho,
                                                         e configurada la no settings da conta Git do Trabalho.

A diferença ao clonar para a segunda conta neste caso é a seguinte, criamos o host para a segunda conta acima "github.com-work",
portanto o comando git para clonar para esta segunda conta Git fica assim:
git clone git@github.com-work:endereçodorepositório
Basta alterar depois do @ exatamente para o Host que estamos utilizando, configurado no arquivo Config da pasta .ssh.

## Informações sobre as Chaves ##
Para listas todas as suas chaves SSH cadastradas na máquina basta digitar o seguinte comando no prompt ou terminal
ssh-add -l

######################################################################

# Comandos pra criar branch
git checkout -b <nomedabranch>
Sem o -b e o nome da branch vc muda para outra branch

# Muda branch mais pra branch homolog e registra no git,
# no nome pode mudar para o branch desejada.
git push -u origin homolog

# Exclui a branch, caso ela nao tenha sido enviada.
# Caso contrario excluir ela diretamente no repositorio
git branch -D <nomedabranch>

# Para deletar a branch diretamente no gib
git push origin --delete <nomedabranch>

Hierarquia de branch padrao
main 
    homolog
            dev

# Comando enviados pelo professor em aula

            Manipulando branch
Criando branch
git checkout -b nome branch

Verificando branch
git branch 

mudando de branch
git checkout nome branch

subindo branch para github
git push -u origin nome branch

excluindo branch
git branch -D nome branch

merge  branch
git merge  nome branch   

mudando nome branch
git branch -m    Novo nome  

excluindo branch remota
git push origin —delete nome branch 

baixar branch remota
git  checkout nome branch

